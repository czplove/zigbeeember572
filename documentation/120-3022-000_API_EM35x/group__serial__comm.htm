<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>EmberZNet API Reference: For the EM35x SoC Platform</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
</head>
<body>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td><img src="SiliconLabsLogo_Black.jpg" style="padding: 10px;width:40%;height:40%;" /></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">EmberZNet API Reference: For the EM35x SoC Platform
   &#160;<span id="projectnumber">EmberZNet 5.7.2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.2 -->
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('group__serial__comm.htm','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Serial Communication</div>  </div>
<div class="ingroups"><a class="el" href="group__apputil.htm">Application Utilities API Reference</a></div></div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga34b433d5bc028d584f8b77a9e24b5571"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#ga34b433d5bc028d584f8b77a9e24b5571">emberSerialInit</a> (uint8_t port, <a class="el" href="group__serial.htm#ga79e9d2305515318a1ae0ab5aaffd6fcb">SerialBaudRate</a> rate, <a class="el" href="group__serial.htm#ga2c48912c12fd98a4f4faffbc7f20a9f6">SerialParity</a> parity, uint8_t stopBits)</td></tr>
<tr class="separator:ga34b433d5bc028d584f8b77a9e24b5571"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaecf02be97a3d08d0c19c9420d0a35bd"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gaaecf02be97a3d08d0c19c9420d0a35bd">emberSerialReadAvailable</a> (uint8_t port)</td></tr>
<tr class="separator:gaaecf02be97a3d08d0c19c9420d0a35bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa6c47ba1de1015a7b30959a3c3163ab0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gaa6c47ba1de1015a7b30959a3c3163ab0">emberSerialReadByte</a> (uint8_t port, uint8_t *dataByte)</td></tr>
<tr class="separator:gaa6c47ba1de1015a7b30959a3c3163ab0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga37f0f389377d7f53714835750c763bf4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#ga37f0f389377d7f53714835750c763bf4">emberSerialReadData</a> (uint8_t port, uint8_t *data, uint16_t length, uint16_t *bytesRead)</td></tr>
<tr class="separator:ga37f0f389377d7f53714835750c763bf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac23d09cb1c4b76030a873f22601c141c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gac23d09cb1c4b76030a873f22601c141c">emberSerialReadDataTimeout</a> (uint8_t port, uint8_t *data, uint16_t length, uint16_t *bytesRead, uint16_t firstByteTimeout, uint16_t subsequentByteTimeout)</td></tr>
<tr class="separator:gac23d09cb1c4b76030a873f22601c141c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga956cccc98a61334ccc178a8242093767"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#ga956cccc98a61334ccc178a8242093767">emberSerialReadLine</a> (uint8_t port, char *data, uint8_t max)</td></tr>
<tr class="separator:ga956cccc98a61334ccc178a8242093767"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0458ca411c8ea7f5ca00807421406080"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#ga0458ca411c8ea7f5ca00807421406080">emberSerialReadPartialLine</a> (uint8_t port, char *data, uint8_t max, uint8_t *index)</td></tr>
<tr class="separator:ga0458ca411c8ea7f5ca00807421406080"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace715d88d33c8b9fb14b809b6b363213"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gace715d88d33c8b9fb14b809b6b363213">emberSerialWriteAvailable</a> (uint8_t port)</td></tr>
<tr class="separator:gace715d88d33c8b9fb14b809b6b363213"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5c8579119b8f0b717373df075ad08669"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#ga5c8579119b8f0b717373df075ad08669">emberSerialWriteUsed</a> (uint8_t port)</td></tr>
<tr class="separator:ga5c8579119b8f0b717373df075ad08669"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadcee0891338d844889f8890e3b91b533"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gadcee0891338d844889f8890e3b91b533">emberSerialWriteByte</a> (uint8_t port, uint8_t dataByte)</td></tr>
<tr class="separator:gadcee0891338d844889f8890e3b91b533"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga86c272c8d47fa301728e6e35962b64da"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#ga86c272c8d47fa301728e6e35962b64da">emberSerialWriteHex</a> (uint8_t port, uint8_t dataByte)</td></tr>
<tr class="separator:ga86c272c8d47fa301728e6e35962b64da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga210c9ed48648ec2ed7ae605637f99c31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#ga210c9ed48648ec2ed7ae605637f99c31">emberSerialWriteString</a> (uint8_t port, PGM_P string)</td></tr>
<tr class="separator:ga210c9ed48648ec2ed7ae605637f99c31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf49fc3ca066e29748d4d0fdc7df534e6"><td class="memItemLeft" align="right" valign="top">XAP2B_PAGEZERO_ON <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gaf49fc3ca066e29748d4d0fdc7df534e6">emberSerialPrintf</a> (uint8_t port, PGM_P formatString,...)</td></tr>
<tr class="separator:gaf49fc3ca066e29748d4d0fdc7df534e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga570ed4076199ff779d545cd34542ba4c"><td class="memItemLeft" align="right" valign="top">XAP2B_PAGEZERO_OFF <br class="typebreak"/>
XAP2B_PAGEZERO_ON <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#ga570ed4076199ff779d545cd34542ba4c">emberSerialPrintfLine</a> (uint8_t port, PGM_P formatString,...)</td></tr>
<tr class="separator:ga570ed4076199ff779d545cd34542ba4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6fd5bc5e84cde0fae179b2de83c4d41"><td class="memItemLeft" align="right" valign="top">XAP2B_PAGEZERO_OFF <br class="typebreak"/>
XAP2B_PAGEZERO_ON <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gac6fd5bc5e84cde0fae179b2de83c4d41">emberSerialPrintCarriageReturn</a> (uint8_t port)</td></tr>
<tr class="separator:gac6fd5bc5e84cde0fae179b2de83c4d41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab68464c024b5fa28d233d02e69dd5b5f"><td class="memItemLeft" align="right" valign="top">XAP2B_PAGEZERO_OFF <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gab68464c024b5fa28d233d02e69dd5b5f">emberSerialPrintfVarArg</a> (uint8_t port, PGM_P formatString, va_list ap)</td></tr>
<tr class="separator:gab68464c024b5fa28d233d02e69dd5b5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga20bafa011c32d634e415170bfa7dd8ac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#ga20bafa011c32d634e415170bfa7dd8ac">emberSerialWriteData</a> (uint8_t port, uint8_t *data, uint8_t length)</td></tr>
<tr class="separator:ga20bafa011c32d634e415170bfa7dd8ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaceea408da2aaa63569d885c06310a73a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gaceea408da2aaa63569d885c06310a73a">emberSerialWriteBuffer</a> (uint8_t port, <a class="el" href="group__ember__types.htm#gad8cef59e716103f3996ce6cb7e10b017">EmberMessageBuffer</a> buffer, uint8_t start, uint8_t length)</td></tr>
<tr class="separator:gaceea408da2aaa63569d885c06310a73a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad9806223fd8a45daa3abbedfae05ce74"><td class="memItemLeft" align="right" valign="top">XAP2B_PAGEZERO_ON <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gad9806223fd8a45daa3abbedfae05ce74">emberSerialWaitSend</a> (uint8_t port)</td></tr>
<tr class="separator:gad9806223fd8a45daa3abbedfae05ce74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga97b3a360e2d0f719ecfd6ba70633023a"><td class="memItemLeft" align="right" valign="top">XAP2B_PAGEZERO_OFF <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#ga97b3a360e2d0f719ecfd6ba70633023a">emberSerialGuaranteedPrintf</a> (uint8_t port, PGM_P formatString,...)</td></tr>
<tr class="separator:ga97b3a360e2d0f719ecfd6ba70633023a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf721671bb351885fbc42f7af0115bd34"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gaf721671bb351885fbc42f7af0115bd34">emberSerialBufferTick</a> (void)</td></tr>
<tr class="separator:gaf721671bb351885fbc42f7af0115bd34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab66c4a051fbbae3a938d8e01f408e5a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#gab66c4a051fbbae3a938d8e01f408e5a5">emberSerialFlushRx</a> (uint8_t port)</td></tr>
<tr class="separator:gab66c4a051fbbae3a938d8e01f408e5a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga88dbef18c629159086e94f6c94999470"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__serial__comm.htm#ga88dbef18c629159086e94f6c94999470">emberSerialUnused</a> (uint8_t port)</td></tr>
<tr class="separator:ga88dbef18c629159086e94f6c94999470"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Unless otherwise noted, the EmberNet stack does not use these functions, and therefore the HAL is not required to implement them. However, many of the supplied example applications do use them. On some platforms, they are also required by DEBUG builds of the stack</p>
<p>Many of these functions return an <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> value. See stack/include/error-defs.h for definitions of all <a class="el" href="error_8h.htm#acff561a945530f3039d6715958418ab8">EmberStatus</a> return values. See <a class="el" href="app_2util_2serial_2serial_8h.htm" title="High-level serial communication functions.">app/util/serial/serial.h</a> for source code. To use these serial routines, they must be properly configured.</p>
<p>If the Ember serial library is built using EMBER_SERIAL_USE_STDIO, then the Ember serial code will redirect to stdio.h. EMBER_SERIAL_USE_STDIO will not consume any of the usual Ember serial library buffers and does not require use of any of the other EMBER_SERIALx definitions described here. In this mode, the only required lower layers are:</p>
<ul>
<li>putchar()</li>
<li>getchar()</li>
<li>fflush(stdout)</li>
<li><a class="el" href="group__serial.htm#gaab61a51a0303d086e456010e087d9e3e" title="Initializes the UART to the given settings (same parameters as emberSerialInit() ).">halInternalUartInit()</a></li>
<li>halInternalPrintfWriteAvailable()</li>
<li>halInternalPrintfReadAvailable()</li>
<li><p class="startli">halInternalForcePrintf()</p>
<p class="startli">The functions can work in two ways, depending on how messages waiting for transmission are stored:</p>
<ul>
<li>Buffered mode: Uses stack linked buffers. This method can be more efficient if many messages received over the air also need to be transmitted over the serial interface.</li>
<li>FIFO mode: Uses a statically allocated queue of bytes, and data to be transmitted is copied into the queue.</li>
</ul>
</li>
</ul>
<p>(These modes deal only with data transmission. Data <b>reception</b> always occurs in a FIFO mode.)</p>
<p>The current version of these sources provides support for as many as two serial ports, but it can be easily extended. The ports are numbered 0 and 1 and should be accessed using those numbers. The ports can be set up independently of each other.</p>
<p>To enable a port, a Use mode (buffered or FIFO) and a Queue Size must be declared on the port. In FIFO mode, the Queue Size is the size of the FIFO and represents the number of bytes that can be waiting for transmission at any given time. In buffered mode, the Queue Size represents the number of whole messages that can be waiting for transmission at any given time. A single message is created for each call to any of the serial APIs.</p>
<p>To specify a Use mode and Queue Size, place declarations in the compiler preprocessor options when building your application:</p>
<ul>
<li><b>Use Mode:</b><ul>
<li>::EMBER_SERIAL0_MODE=<a class="el" href="group__serial.htm#gac4245c7ba24addf61a174d4684d560e9" title="A numerical definition for a possible serial mode the code can test for.">EMBER_SERIAL_BUFFER</a> or <a class="el" href="group__serial.htm#gaa8305e0960f14a47b6f6e5e68e00b433" title="A numerical definition for a possible serial mode the code can test for.">EMBER_SERIAL_FIFO</a></li>
<li>::EMBER_SERIAL1_MODE=<a class="el" href="group__serial.htm#gac4245c7ba24addf61a174d4684d560e9" title="A numerical definition for a possible serial mode the code can test for.">EMBER_SERIAL_BUFFER</a> or <a class="el" href="group__serial.htm#gaa8305e0960f14a47b6f6e5e68e00b433" title="A numerical definition for a possible serial mode the code can test for.">EMBER_SERIAL_FIFO</a></li>
</ul>
</li>
<li><b>Queue Size:</b><ul>
<li>::EMBER_SERIAL0_TX_QUEUE_SIZE=2</li>
<li>::EMBER_SERIAL0_RX_QUEUE_SIZE=4</li>
<li>::EMBER_SERIAL1_TX_QUEUE_SIZE=8</li>
<li>::EMBER_SERIAL1_RX_QUEUE_SIZE=16</li>
</ul>
</li>
</ul>
<p>Note the following:</p>
<ul>
<li>If buffered mode is declared, <a class="el" href="group__serial__comm.htm#gaf721671bb351885fbc42f7af0115bd34" title="When a serial port is used in buffered mode, this must be called in an application&#39;s main event loop...">emberSerialBufferTick()</a> should be called in the application's main event loop.</li>
<li>If buffered mode is declared, the Tx queue size <b>MUST</b> be &lt;= 255</li>
<li>On the AVR platform, Rx &amp; Tx queue sizes are limited to powers of 2 &lt;= 128</li>
<li>By default, both ports are unused.</li>
</ul>
<p>You can also use declarations to specify what should be done if an attempt is made to send more data than the queue can accommodate:</p>
<ul>
<li>::EMBER_SERIAL0_BLOCKING</li>
<li>::EMBER_SERIAL1_BLOCKING</li>
</ul>
<p>Be aware that since blocking spins in a loop, doing nothing until space is available, it can adversely affect any code that has tight timing requirements.</p>
<p>If ::EMBER_SERIAL0_BLOCKING or ::EMBER_SERIAL1_BLOCKING is defined, then the call to the port will block until space is available, guaranteeing that the entire message is sent. Note that in buffered mode, even if blocking mode is in effect entire messages may be dropped if insufficient stack buffers are available to hold them. When this happens, <a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> is returned.</p>
<p>If no blocking mode is defined, the serial code defaults to non-blocking mode. In this event, when the queue is too short, the data that don't fit are dropped. In FIFO mode, this may result bytes being dropped, starting in the middle of message. In buffered mode, the entire message is dropped. When data is dropped, ::EMBER_SERIALTX_OVERFLOW is returned.</p>
<p>To minimize code size, very little error checking is done on the given parameters. Specifying an invalid or unused serial port may result in unexplained behavior. In some cases <a class="el" href="group__status__codes.htm#ga84817b6311c9b401707f01c16920eebc" title="The generic &quot;fatal error&quot; message.">EMBER_ERR_FATAL</a> may be returned. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga34b433d5bc028d584f8b77a9e24b5571"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialInit </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__serial.htm#ga79e9d2305515318a1ae0ab5aaffd6fcb">SerialBaudRate</a>&#160;</td>
          <td class="paramname"><em>rate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__serial.htm#ga2c48912c12fd98a4f4faffbc7f20a9f6">SerialParity</a>&#160;</td>
          <td class="paramname"><em>parity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>stopBits</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes a serial port to a specific baud rate, parity, and number of stop bits. Eight data bits are always used. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">rate</td><td>The baud rate (see SerialBaudRate).</td></tr>
    <tr><td class="paramname">parity</td><td>The parity value (see SerialParity).</td></tr>
    <tr><td class="paramname">stopBits</td><td>The number of stop bits.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An error code if initialization failed (such as invalid baudrate), or <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="gaaecf02be97a3d08d0c19c9420d0a35bd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t emberSerialReadAvailable </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of bytes currently available for reading in the specified RX queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of bytes available. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa6c47ba1de1015a7b30959a3c3163ab0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialReadByte </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>dataByte</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reads a byte from the specified RX queue. If an error is returned, the dataByte should be ignored. For errors other than <a class="el" href="group__status__codes.htm#gadf460bf86e4a7fb395d9969962860f22" title="There is no received data to process.">EMBER_SERIAL_RX_EMPTY</a> multiple bytes of data may have been lost and serial protocols should attempt to resynchronize. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">dataByte</td><td>A pointer to storage location for the byte.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#gadf460bf86e4a7fb395d9969962860f22" title="There is no received data to process.">EMBER_SERIAL_RX_EMPTY</a> if no data is available</li>
<li><a class="el" href="group__status__codes.htm#ga00f1eb47ffdce9bada18b7ff11d8b561" title="There was not enough space to store a received character and the character was dropped.">EMBER_SERIAL_RX_OVERFLOW</a> if the serial receive fifo was out of space</li>
<li><a class="el" href="group__status__codes.htm#gab0fc848db91442d5082134080baeb0ee" title="Detected a UART framing error.">EMBER_SERIAL_RX_FRAME_ERROR</a> if a framing error was received</li>
<li><a class="el" href="group__status__codes.htm#gaade26a197b4584190ac69449bac4e978" title="Detected a UART parity error.">EMBER_SERIAL_RX_PARITY_ERROR</a> if a parity error was received</li>
<li><a class="el" href="group__status__codes.htm#ga113b804311f2101c55e5345cc01bd22d" title="The receive interrupt was not handled in time, and a character was dropped.">EMBER_SERIAL_RX_OVERRUN_ERROR</a> if the hardware fifo was out of space</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if a data byte is returned </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga37f0f389377d7f53714835750c763bf4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialReadData </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t *&#160;</td>
          <td class="paramname"><em>bytesRead</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reads bytes from the specified RX queue. Blocks until the full length has been read or an error occurs. In the event of an error, some valid data may have already been read before the error occurred, in which case that data will be in the buffer pointed to by <code>data</code> and the number of bytes successfully read will be placed in <code>bytesRead</code>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">data</td><td>A pointer to storage location for the data. It must be at least <code>length</code> in size.</td></tr>
    <tr><td class="paramname">length</td><td>The number of bytes to read.</td></tr>
    <tr><td class="paramname">bytesRead</td><td>A pointer to a location that will receive the number of bytes read. If the function returns early due to an error, this value may be less than <code>length</code>. This parameter may be NULL, in which case it is ignored.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga00f1eb47ffdce9bada18b7ff11d8b561" title="There was not enough space to store a received character and the character was dropped.">EMBER_SERIAL_RX_OVERFLOW</a> if the serial receive fifo was out of space</li>
<li><a class="el" href="group__status__codes.htm#gab0fc848db91442d5082134080baeb0ee" title="Detected a UART framing error.">EMBER_SERIAL_RX_FRAME_ERROR</a> if a framing error was received</li>
<li><a class="el" href="group__status__codes.htm#gaade26a197b4584190ac69449bac4e978" title="Detected a UART parity error.">EMBER_SERIAL_RX_PARITY_ERROR</a> if a parity error was received</li>
<li><a class="el" href="group__status__codes.htm#ga113b804311f2101c55e5345cc01bd22d" title="The receive interrupt was not handled in time, and a character was dropped.">EMBER_SERIAL_RX_OVERRUN_ERROR</a> if the hardware fifo was out of space</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if all the data requested is returned </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gac23d09cb1c4b76030a873f22601c141c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialReadDataTimeout </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>length</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t *&#160;</td>
          <td class="paramname"><em>bytesRead</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>firstByteTimeout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>subsequentByteTimeout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reads bytes from the specified RX queue, up to a maximum of <code>length</code> bytes. The function may return before <code>length</code> bytes is read if a timeout is reached or an error occurs. Returns <a class="el" href="group__status__codes.htm#gadf460bf86e4a7fb395d9969962860f22" title="There is no received data to process.">EMBER_SERIAL_RX_EMPTY</a> if a timeout occurs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">data</td><td>A pointer to storage location for the data. It must be at least <code>length</code> in size.</td></tr>
    <tr><td class="paramname">length</td><td>The maximum number of bytes to read.</td></tr>
    <tr><td class="paramname">bytesRead</td><td>A pointer to a location that will receive the number of bytes read. If the function returns early due to an error or timeout, this value may be less than <code>length</code>. This parameter may be NULL, in which case it is ignored.</td></tr>
    <tr><td class="paramname">firstByteTimeout</td><td>The amount of time, in milliseconds, to wait for the first byte to arrive (if the queue is empty when the function is called). This value must be a minimum of 2 due to the timer resolution.</td></tr>
    <tr><td class="paramname">subsequentByteTimeout</td><td>The amount of time, in milliseconds, to wait after the previous byte was received for the next byte to arrive. This value must be a minimum of 2 due to the timer resolution.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#gadf460bf86e4a7fb395d9969962860f22" title="There is no received data to process.">EMBER_SERIAL_RX_EMPTY</a> if the timeout was exceeded before the requested amount of data was read</li>
<li><a class="el" href="group__status__codes.htm#ga00f1eb47ffdce9bada18b7ff11d8b561" title="There was not enough space to store a received character and the character was dropped.">EMBER_SERIAL_RX_OVERFLOW</a> if the serial receive fifo was out of space</li>
<li><a class="el" href="group__status__codes.htm#gab0fc848db91442d5082134080baeb0ee" title="Detected a UART framing error.">EMBER_SERIAL_RX_FRAME_ERROR</a> if a framing error was received</li>
<li><a class="el" href="group__status__codes.htm#gaade26a197b4584190ac69449bac4e978" title="Detected a UART parity error.">EMBER_SERIAL_RX_PARITY_ERROR</a> if a parity error was received</li>
<li><a class="el" href="group__status__codes.htm#ga113b804311f2101c55e5345cc01bd22d" title="The receive interrupt was not handled in time, and a character was dropped.">EMBER_SERIAL_RX_OVERRUN_ERROR</a> if the hardware fifo was out of space</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if all the data requested is returned </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga956cccc98a61334ccc178a8242093767"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialReadLine </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simulates a terminal interface, reading a line of characters at a time. Supports backspace. Always converts to uppercase. Blocks until a line has been read or max has been exceeded. Calls on <a class="el" href="group__iar.htm#ga12ef4b3c98231a44d2c2cd3b04cec5a4" title="A convenient method for code to know what endiannes processor it is running on. For the Cortex-M3...">halResetWatchdog()</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">data</td><td>A pointer to storage location for the read line. There must be <code>max</code> contiguous bytes available at this location.</td></tr>
    <tr><td class="paramname">max</td><td>The maximum number of bytes to read.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga0458ca411c8ea7f5ca00807421406080"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialReadPartialLine </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simulates a partial terminal interface, reading a line of characters at a time. Supports backspace. Always converts to uppercase. returns <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> when a line has been read or max has been exceeded. Must initialize the index variable to 0 to start a line. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">data</td><td>A pointer to storage location for the read line. There must be <code>max</code> contiguous bytes available at this location.</td></tr>
    <tr><td class="paramname">max</td><td>The maximum number of bytes to read.</td></tr>
    <tr><td class="paramname">index</td><td>The address of a variable that holds the place in the <code>data</code> to continue. Set to 0 to start a line read.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#gadf460bf86e4a7fb395d9969962860f22" title="There is no received data to process.">EMBER_SERIAL_RX_EMPTY</a> if a partial line is in progress.</li>
<li><a class="el" href="group__status__codes.htm#ga00f1eb47ffdce9bada18b7ff11d8b561" title="There was not enough space to store a received character and the character was dropped.">EMBER_SERIAL_RX_OVERFLOW</a> if the serial receive fifo was out of space.</li>
<li><a class="el" href="group__status__codes.htm#gab0fc848db91442d5082134080baeb0ee" title="Detected a UART framing error.">EMBER_SERIAL_RX_FRAME_ERROR</a> if a framing error was received.</li>
<li><a class="el" href="group__status__codes.htm#gaade26a197b4584190ac69449bac4e978" title="Detected a UART parity error.">EMBER_SERIAL_RX_PARITY_ERROR</a> if a parity error was received.</li>
<li><a class="el" href="group__status__codes.htm#ga113b804311f2101c55e5345cc01bd22d" title="The receive interrupt was not handled in time, and a character was dropped.">EMBER_SERIAL_RX_OVERRUN_ERROR</a> if the hardware fifo was out of space.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if a full ine is ready. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gace715d88d33c8b9fb14b809b6b363213"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t emberSerialWriteAvailable </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of bytes (in FIFO mode) or messages (in buffered mode) that can currently be queued to send without blocking or dropping. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of bytes or messages available for queueing. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5c8579119b8f0b717373df075ad08669"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t emberSerialWriteUsed </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of bytes (in FIFO mode) or messages (in buffered mode) that are currently queued and still being sent. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of bytes or messages available for queueing. </dd></dl>

</div>
</div>
<a class="anchor" id="gadcee0891338d844889f8890e3b91b533"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialWriteByte </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>dataByte</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Queues a single byte of data for transmission on the specified port. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">dataByte</td><td>The byte to be queued.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga7dfde8cccb51f232b6748edeb83437df" title="Tried to send too much data.">EMBER_SERIAL_TX_OVERFLOW</a> indicates that data was dropped.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> indicates that there was an insufficient number of available stack buffers.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga86c272c8d47fa301728e6e35962b64da"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialWriteHex </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>dataByte</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts a given byte of data to its two-character ASCII hex representation and queues it for transmission on the specified port. Values less than 0xF are always zero padded and queued as "0F". </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">dataByte</td><td>The byte to be converted.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga7dfde8cccb51f232b6748edeb83437df" title="Tried to send too much data.">EMBER_SERIAL_TX_OVERFLOW</a> indicates that data was dropped.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> indicates that there was an insufficient number of available stack buffers.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga210c9ed48648ec2ed7ae605637f99c31"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialWriteString </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_P&#160;</td>
          <td class="paramname"><em>string</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Queues a string for transmission on the specified port. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">string</td><td>The string to be queued.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga7dfde8cccb51f232b6748edeb83437df" title="Tried to send too much data.">EMBER_SERIAL_TX_OVERFLOW</a> indicates that data was dropped.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> indicates that there was an insufficient number of available stack buffers.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gaf49fc3ca066e29748d4d0fdc7df534e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XAP2B_PAGEZERO_ON <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialPrintf </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_P&#160;</td>
          <td class="paramname"><em>formatString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Printf for printing on a specified port. Supports the following format specifiers: </p>
<ul>
<li>%% percent sign</li>
<li>c single-byte character</li>
<li>s RAM string</li>
<li>p flash string (nonstandard specifier)</li>
<li>u 2-byte unsigned decimal</li>
<li>d 2-byte signed decimal</li>
<li>l 4-byte signed decimal</li>
<li>x %2x %4x 1-, 2-, 4-byte hex value (always 0 padded) (nonstandard specifier)</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">formatString</td><td>The string to print.</td></tr>
    <tr><td class="paramname">...</td><td>Format specifiers.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga7dfde8cccb51f232b6748edeb83437df" title="Tried to send too much data.">EMBER_SERIAL_TX_OVERFLOW</a> indicates that data was dropped.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> indicates that there was an insufficient number of available stack buffers.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga570ed4076199ff779d545cd34542ba4c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XAP2B_PAGEZERO_OFF XAP2B_PAGEZERO_ON <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialPrintfLine </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_P&#160;</td>
          <td class="paramname"><em>formatString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Printf for printing on a specified port. Same as <a class="el" href="group__serial__comm.htm#gaf49fc3ca066e29748d4d0fdc7df534e6" title="Printf for printing on a specified port. Supports the following format specifiers:">emberSerialPrintf()</a> except it prints a carriage return at the the end of the text. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">formatString</td><td>The string to print.</td></tr>
    <tr><td class="paramname">...</td><td>Format specifiers.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga7dfde8cccb51f232b6748edeb83437df" title="Tried to send too much data.">EMBER_SERIAL_TX_OVERFLOW</a> indicates that data was dropped.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> indicates that there was an insufficient number of available stack buffers.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gac6fd5bc5e84cde0fae179b2de83c4d41"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XAP2B_PAGEZERO_OFF XAP2B_PAGEZERO_ON <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialPrintCarriageReturn </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prints "\r\n" to the specified serial port. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga7dfde8cccb51f232b6748edeb83437df" title="Tried to send too much data.">EMBER_SERIAL_TX_OVERFLOW</a> indicates that data was dropped.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> indicates that there was an insufficient number of available stack buffers.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gab68464c024b5fa28d233d02e69dd5b5f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XAP2B_PAGEZERO_OFF <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialPrintfVarArg </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_P&#160;</td>
          <td class="paramname"><em>formatString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">va_list&#160;</td>
          <td class="paramname"><em>ap</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prints a format string with a variable argument list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1). </td></tr>
    <tr><td class="paramname">formatString</td><td>A printf style format string. </td></tr>
    <tr><td class="paramname">ap</td><td>A variable argument list.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga7dfde8cccb51f232b6748edeb83437df" title="Tried to send too much data.">EMBER_SERIAL_TX_OVERFLOW</a> indicates that data was dropped.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> indicates that there was an insufficient number of available stack buffers.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga20bafa011c32d634e415170bfa7dd8ac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialWriteData </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Queues an arbitrary chunk of data for transmission on a specified port. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">data</td><td>A pointer to data.</td></tr>
    <tr><td class="paramname">length</td><td>The number of bytes to queue.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga7dfde8cccb51f232b6748edeb83437df" title="Tried to send too much data.">EMBER_SERIAL_TX_OVERFLOW</a> indicates that data was dropped.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> indicates that there was an insufficient number of available stack buffers.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gaceea408da2aaa63569d885c06310a73a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialWriteBuffer </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gad8cef59e716103f3996ce6cb7e10b017">EmberMessageBuffer</a>&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Queues data contained in linked stack buffers for transmission on a specified port. Can specify an arbitrary initial offset within the linked buffer chain. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">buffer</td><td>The starting buffer in linked buffer chain.</td></tr>
    <tr><td class="paramname">start</td><td>The offset from first buffer in chain.</td></tr>
    <tr><td class="paramname">length</td><td>The number of bytes to queue.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga7dfde8cccb51f232b6748edeb83437df" title="Tried to send too much data.">EMBER_SERIAL_TX_OVERFLOW</a> indicates that data was dropped.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> indicates that there was an insufficient number of available stack buffers.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gad9806223fd8a45daa3abbedfae05ce74"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XAP2B_PAGEZERO_ON <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialWaitSend </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Waits for all data currently queued on the specified port to be transmitted before returning. <b>Note:</b> Call this function before serial reinitialization to ensure that transmission is complete. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga7dfde8cccb51f232b6748edeb83437df" title="Tried to send too much data.">EMBER_SERIAL_TX_OVERFLOW</a> indicates that data was dropped.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> indicates that there was an insufficient number of available stack buffers.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga97b3a360e2d0f719ecfd6ba70633023a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XAP2B_PAGEZERO_OFF <a class="el" href="group__ember__types.htm#gacff561a945530f3039d6715958418ab8">EmberStatus</a> emberSerialGuaranteedPrintf </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">PGM_P&#160;</td>
          <td class="paramname"><em>formatString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A printf routine that takes over the specified serial port and immediately transmits the given data regardless of what is currently queued. Does not return until the transmission is complete. </p>
<dl class="section user"><dt>Application Usage:</dt><dd>Useful for fatal situations (such as asserts) where the node will be reset, but information on the cause for the reset needs to be transmitted first.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1).</td></tr>
    <tr><td class="paramname">formatString</td><td>The string to print.</td></tr>
    <tr><td class="paramname">...</td><td>Formatting specifiers. See <a class="el" href="group__serial__comm.htm#gaf49fc3ca066e29748d4d0fdc7df534e6" title="Printf for printing on a specified port. Supports the following format specifiers:">emberSerialPrintf()</a> for arguments.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the following (see the Main Page):<ul>
<li><a class="el" href="group__status__codes.htm#ga7dfde8cccb51f232b6748edeb83437df" title="Tried to send too much data.">EMBER_SERIAL_TX_OVERFLOW</a> indicates that data was dropped.</li>
<li><a class="el" href="group__status__codes.htm#ga4d3c1feb618bb0c29c791d99386de625" title="There are no more buffers.">EMBER_NO_BUFFERS</a> indicates that there was an insufficient number of available stack buffers.</li>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a>. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="gaf721671bb351885fbc42f7af0115bd34"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberSerialBufferTick </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>When a serial port is used in buffered mode, this must be called in an application's main event loop, similar to <a class="el" href="group__network__formation.htm#gaaf3d7cad7b0f03d28eea981561db64d8" title="A periodic tick routine that should be called:">emberTick()</a>. It frees buffers that are used to queue messages. <b>Note:</b> This function has no effect if FIFO mode is being used. </p>

</div>
</div>
<a class="anchor" id="gab66c4a051fbbae3a938d8e01f408e5a5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberSerialFlushRx </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Flushes the receive buffer in case none of the incoming serial data is wanted. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number (0 or 1). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga88dbef18c629159086e94f6c94999470"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool emberSerialUnused </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>port</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates whether the port is unused or invalid. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>A serial port number.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the port is unused or invalid. </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<hr size="1">
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr>
<td><address><small>
EmberZNet API Reference: For the EM35x SoC Platform. EmberZNet 5.7.2.0.
</small></address>
</td>
<td align="right">
<address><small>
</small></address>
</td>
</tr>
</table>
</body>
</html>
